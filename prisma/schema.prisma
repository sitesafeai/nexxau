datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  phoneNumber   String?
  accounts      Account[]
  sessions      Session[]
  role          String    @default("user")
  company       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  approved      Boolean   @default(false)
  verificationToken String? @unique
  alertResponses AlertResponse[]
  alertRules    AlertRule[]
  workflows     Workflow[]
  blogPosts     BlogPost[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Alert {
  id          String      @id @default(cuid())
  title       String
  description String
  severity    AlertSeverity
  status      AlertStatus  @default(ACTIVE)
  source      String      // e.g., "camera", "sensor", "manual"
  location    String?     // Optional location information
  metadata    Json?       // Additional alert data
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  resolvedAt  DateTime?
  rule        AlertRule?  @relation(fields: [ruleId], references: [id])
  ruleId      String?
  site        Site?       @relation(fields: [siteId], references: [id])
  siteId      String?
  responses   AlertResponse[]
}

model AlertRule {
  id          String    @id @default(cuid())
  name        String
  description String?
  condition   Json      // Stores the rule conditions
  severity    AlertSeverity
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  alerts      Alert[]
  site        Site?     @relation(fields: [siteId], references: [id])
  siteId      String?
  userId      String?
  user        User?     @relation(fields: [userId], references: [id])
}

model AlertResponse {
  id        String   @id @default(cuid())
  alert     Alert    @relation(fields: [alertId], references: [id])
  alertId   String
  action    String   // e.g., "acknowledged", "resolved", "escalated"
  notes     String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Site {
  id          String      @id @default(cuid())
  name        String
  description String?
  location    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  alerts      Alert[]
  alertRules  AlertRule[]
}

model Workflow {
  id          String   @id @default(cuid())
  name        String
  description String?
  nodes       Json     // Stores the workflow nodes
  edges       Json     // Stores the workflow edges
  rules       Json     // Stores the generated rules
  enabled     Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AlertStatus {
  ACTIVE
  ACKNOWLEDGED
  RESOLVED
  ESCALATED
}

model Client {
  id        String     @id @default(cuid())
  name      String
  email     String     @unique
  phone     String?
  address   String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  worksites Worksite[]
}

model Worksite {
  id                String            @id @default(cuid())
  name              String
  address           String
  clientId          String
  client            Client            @relation(fields: [clientId], references: [id])
  cameraSystemType  String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  cameraSystemConfig CameraSystemConfig?
  workers           Worker[]
  cameras           Camera[]
}

model Camera {
  id                String            @id @default(cuid())
  name              String
  type              String
  status            String            @default("active")
  worksiteId        String
  worksite          Worksite          @relation(fields: [worksiteId], references: [id])
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model CameraSystemConfig {
  id        String   @id @default(cuid())
  worksiteId String  @unique
  worksite   Worksite @relation(fields: [worksiteId], references: [id])
  config     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Worker {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  role      String
  worksiteId String
  worksite   Worksite @relation(fields: [worksiteId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model BlogPost {
  id            String   @id @default(uuid())
  title         String
  description   String
  content       String
  category      String
  featured      Boolean  @default(false)
  publishedAt   DateTime?
  status        String   @default("draft") // 'published' or 'draft'
  author        User?    @relation(fields: [authorId], references: [id])
  authorId      String?
  featuredImage String?
  slug          String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
} 

